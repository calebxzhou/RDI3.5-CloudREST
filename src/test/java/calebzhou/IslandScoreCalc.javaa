package calebzhou;

import calebzhou.rdicloudrest.dao.DatabaseConnector;
import calebzhou.rdicloudrest.model.RecordBlock;
import com.google.common.collect.LinkedHashMultimap;
import com.google.common.collect.Multimap;
import lombok.SneakyThrows;
import lombok.extern.slf4j.Slf4j;

import java.sql.ResultSet;
import java.sql.SQLException;
import java.time.LocalDate;
import java.time.format.DateTimeFormatter;
import java.util.Arrays;
import java.util.Collection;
import java.util.HashMap;
import java.util.List;
import java.util.concurrent.ConcurrentHashMap;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.TimeUnit;
import java.util.concurrent.atomic.AtomicInteger;

@Slf4j
public class IslandScoreCalc {
    private static final List<String> ignoreBlocks = Arrays.asList("block.minecraft.farmland",
            "block.minecraft.air",
            "block.minecraft.potatoes",
            "block.minecraft.magma_block",
            "block.minecraft.netherrack",
            "block.minecraft.composter",
            "block.minecraft.potatoes",
            "block.minecraft.sand",
            "block.minecraft.gravel",
            "block.minecraft.magma_block",
            "block.minecraft.carrots",
            "block.minecraft.chest",
            "block.minecraft.dirt",
            "block.minecraft.obsidian",
            "block.minecraft.ice",
            "block.minecraft.end_stone",
            "block.minecraft.crafting_table",
            "block.minecraft.bedrock",
            "block.minecraft.piston_head",
            "block.minecraft.lever",
            "block.minecraft.grass_block",
            "block.minecraft.fire",
            "block.minecraft.wheat",
            "block.minecraft.soul_sand",
            "block.minecraft.torch",
            "block.minecraft.sugar_cane");
    public static final List<String> bonusBlockPrefix = Arrays.asList("block.modern_industrialization","block.ae2","block.expandedstorage","block.techreborn"
    ,"block.botania","block.skyutils","block.indrev");


    //日期，从20211229开始（表名）
    final String startDate = "20211229";
    final DateTimeFormatter tableNameFormat = DateTimeFormatter.ofPattern("yyyyMMdd");
    //uuid  name
    final HashMap<String,String> uuidNameMap= new HashMap<>();
    final Multimap<String,String> deathMap = LinkedHashMultimap.create();
    final ExecutorService threadPool = Executors.newFixedThreadPool(DatabaseConnector.CONN_MAX_AMOUNT);
    final ConcurrentHashMap<String,Integer> uuidScoreMap = new ConcurrentHashMap<>();
    final ConcurrentHashMap<String,Long> playTimeMap = new ConcurrentHashMap<>();
    private void startCalc(){
        initMaps();
//等待执行完成


        //20211229到现在,for循环
        LocalDate tableNameDate;
        //玩家列表作为线程数量
        for(tableNameDate = LocalDate.parse(startDate, tableNameFormat);
                tableNameDate.isBefore(LocalDate.now());
                tableNameDate=tableNameDate.plusDays(1))
        {
            final LocalDate finalTableNameDate = tableNameDate;
            threadPool.execute(()->{
                log.info("\n"+finalTableNameDate+"\n");
                final Multimap<String, BlockRecord> recordOfDay = getRecordOfDay(finalTableNameDate);
                uuidNameMap.entrySet().parallelStream().forEach(entry -> {

                    String pid = entry.getKey();
                    String pname = entry.getValue();
                    Collection<BlockRecord> blockRecords = recordOfDay.get(pid);
                    AtomicInteger score= new AtomicInteger();
                    blockRecords.parallelStream().forEach(br->{

                        bonusBlockPrefix.parallelStream().forEach(p->{
                            //特殊积分方块
                            if(br.getBlockType().startsWith(p))
                                score.addAndGet(3);
                            else if(br.getBlockAction().equalsIgnoreCase("BREAK"))
                                score.addAndGet(-1);
                            else
                                score.addAndGet(1);
                        });
                    });

                    if(score.get()>0)
                        log.info(pname+"="+score.get()+";   ");
                    uuidScoreMap.put(pid,uuidScoreMap.get(pid)==null?score.get():uuidScoreMap.get(pid)+score.get());
                });
            });

        }
        threadPool.shutdown();
        try {
            threadPool.awaitTermination(Long.MAX_VALUE, TimeUnit.NANOSECONDS);
        } catch (InterruptedException e) {
            e.printStackTrace();
        }
        uuidNameMap.entrySet().parallelStream().forEach(entry -> {
            String pid = entry.getKey();
            int score = uuidScoreMap.get(pid);
            String pname = entry.getValue();
            int deathCount = deathMap.get(pid).size();
            score -= Math.cbrt(deathCount);
            log.info("{} 扣除 {}",pname,score);
            uuidScoreMap.put(pid,score);
        });

        log.info("------\n");
        try {
            DatabaseConnector.getPreparedStatement("delete from rdi3.IslandScore").executeUpdate();
        } catch (SQLException e) {
            e.printStackTrace();
        }
        uuidScoreMap.entrySet().parallelStream().forEach((entry)->{
            try {
                DatabaseConnector.getPreparedStatement("insert into rdi3.IslandScore values (?,?)",entry.getKey(),entry.getValue()).executeUpdate();
            } catch (SQLException e) {
                e.printStackTrace();
            }
        });

    }

    @SneakyThrows
    private void initMaps(){
        ExecutorService threadPool = Executors.newFixedThreadPool(DatabaseConnector.CONN_MAX_AMOUNT);
        log.info("载入uuid map");
        threadPool.submit(()->{
                try {
                    ResultSet rs = DatabaseConnector.getPreparedStatement("select * from rdi3.UuidNameRecord").executeQuery();
                    while(rs.next()){
                        String pid = rs.getString("pid");
                        String pname = rs.getString("pname");
                        System.out.println(pid+pname);
                        uuidNameMap.put(pid, pname);
                    }
                } catch (SQLException e) {
                    e.printStackTrace();
                }
            });

        log.info("death record");
        threadPool.submit(()->{
            try {
                ResultSet rs = DatabaseConnector.getPreparedStatement("select * from rdi3.DeathRecord").executeQuery();
                while (rs.next()){
                    String pid = rs.getString("pid");
                    String src = rs.getString("src");
                    System.out.println(pid+src);
                    deathMap.put(pid, src);
                }
            } catch (SQLException e) {
                e.printStackTrace();
            }
        });
        log.info("playTimeRecord");

        threadPool.shutdown();
        threadPool.awaitTermination(30L,TimeUnit.SECONDS);
    }
    //获取每一天的方块积分记录
    private Multimap<String,BlockRecord> getRecordOfDay(LocalDate date){
        String tableName="br.BlockRecord_"+date.format(tableNameFormat);

        Multimap<String,BlockRecord> map = LinkedHashMultimap.create();
        try {
            ResultSet rs = DatabaseConnector.getPreparedStatement("select * from " + tableName+" where blockType<>'block.minecraft.air'").executeQuery();
            String pid="";
            String blockType="";
            String blockAction="";
            while(rs.next()){
                pid= rs.getString("pid");
                blockType= rs.getString("blockType");
                blockAction= rs.getString("blockAction");
                /*if(ignoreBlocks.contains(blockType))
                    continue;*/
                //map.put(pid,new BlockRecord(null,blockType,blockAction,null,null));

            }
        } catch (SQLException e) {
            e.printStackTrace();
        }
        return map;
    }

    public static void main(String[] args) {
        IslandScoreCalc calc = new IslandScoreCalc();
        calc.startCalc();
    }

}
